"use client";

// Global flag to track when logout is in progress to prevent unnecessary API calls
let isLogoutInProgress = false;

// Function to set the logout status flag
export const setLogoutInProgress = (status: boolean) => {
    isLogoutInProgress = status;
};

// Function to get the current logout status
export const getIsLogoutInProgress = (): boolean => {
    return isLogoutInProgress;
};

// Fun√ß√£o para tratar respostas da API e verificar erro 401
export const handleApiResponse = async (response: Response): Promise<Response> => {
    // Verifica se a resposta indica erro de autentica√ß√£o
    if (response.status === 401) {
        // Verifica se √© um logout intencional atrav√©s do header especial
        const isIntentionalLogout = response.headers.get('X-Logout-Type') === 'intentional';

        // Evita processamento se estivermos na p√°gina de login ou se for um logout intencional
        if (isIntentionalLogout || window.location.pathname.includes('/login')) {
            return response;
        }

        // S√≥ armazena erro de sess√£o expirada para logouts n√£o intencionais
        if (typeof sessionStorage !== 'undefined') {
            sessionStorage.setItem(
                'authError',
                'Sua sess√£o expirou. Fa√ßa login novamente para continuar.'
            );
        }

        // Para logouts n√£o intencionais, limpamos cookies via API
        try {
            // Evita chamadas desnecess√°rias se o logout j√° estiver em andamento
            if (!isLogoutInProgress) {
                setLogoutInProgress(true);
                await fetch('/api/auth/logout', {
                    method: 'POST',
                    credentials: 'include',
                    // Adiciona cache-control para evitar problemas de cache
                    headers: {
                        'Cache-Control': 'no-cache, no-store, must-revalidate'
                    }
                });
                setLogoutInProgress(false);
            }
        } catch (error) {
            console.error('Erro ao fazer logout:', error);
            setLogoutInProgress(false);
        }

        // Limpar tamb√©m localStorage para garantir que n√£o haja dados de autentica√ß√£o residuais
        localStorage.removeItem('userData');
        localStorage.removeItem('colaborador');
        localStorage.removeItem('codigo_pessoa');
        localStorage.removeItem('perfil_inspecao');

        // Verifica novamente se N√ÉO estamos na p√°gina de login para evitar redirecionamentos redundantes
        if (!window.location.pathname.includes('/login')) {
            // Redireciona para a p√°gina de login com um delay para garantir finaliza√ß√£o de outras opera√ß√µes
            setTimeout(() => {
                window.location.href = '/login';
            }, 100);
        }

        // Lan√ßa erro para interromper execu√ß√£o
        throw new Error(isIntentionalLogout ? 'Logout successful' : 'Session expired');
    }

    return response;
};

// Fun√ß√£o utilit√°ria para requisi√ß√µes fetch com tratamento de 401 e cookies autom√°tico
export const fetchWithAuth = async (
    url: string,
    options: RequestInit = {}
): Promise<Response> => {
    // N√£o fazer requisi√ß√µes se o logout estiver em progresso
    if (isLogoutInProgress) {
        throw new Error('Requisi√ß√£o cancelada: logout em progresso');
    }

    const apiUrl = localStorage.getItem("apiUrl");

    if (!apiUrl) {
        throw new Error('API URL n√£o configurada');
    }

    // Fun√ß√£o para obter o token do cookie ou localStorage
    const getToken = (): string | null => {
        // Tenta obter do cookie primeiro
        if (typeof document !== 'undefined') {
            const cookies = document.cookie.split(';');
            for (let i = 0; i < cookies.length; i++) {
                const cookie = cookies[i].trim();
                if (cookie.startsWith('authTokenJS=')) {
                    return cookie.substring('authTokenJS='.length);
                }
            }
        }
        // Se n√£o encontrar no cookie, tenta obter do localStorage
        return localStorage.getItem('authToken');
    };

    // Obter token de autentica√ß√£o
    const authToken = getToken();

    // Prepara os headers para o proxy
    const headers: HeadersInit = {
        'Content-Type': 'application/json',
        'x-api-url': apiUrl,
        'x-target-path': url.replace(apiUrl, ''), // Remove a base URL para obter apenas o path,
        // Adiciona o token nos headers para garantir autentica√ß√£o mesmo sem cookies
        'x-auth-token': authToken || '',
        ...options.headers
    };

    try {
        // Cria headers espec√≠ficos para diagn√≥stico
        const customHeaders = {
            ...headers as Record<string, string>, // Cast para permitir indexa√ß√£o din√¢mica
            'x-is-production': process.env.NODE_ENV === 'production' ? 'true' : 'false',
            'x-has-local-token': localStorage.getItem('authToken') ? 'true' : 'false'
        };

        // Log de depura√ß√£o b√°sico
        if (process.env.NODE_ENV === 'development') {
            console.log('üîÑ Fazendo requisi√ß√£o para:', url);
            console.log('üîë Token dispon√≠vel:', !!authToken);
        }

        // Faz a requisi√ß√£o atrav√©s do proxy
        const response = await fetch('/api/proxy', {
            ...options,
            headers: customHeaders,
            credentials: 'include', // Inclui cookies HttpOnly automaticamente
            // Desabilitar cache para evitar problemas com tokens expirados
            cache: 'no-store'
        });

        return handleApiResponse(response);
    } catch (error) {
        // Log de erros de rede
        if (!isLogoutInProgress) {
            console.error(`‚ùå Network Error: ${error}`);
        }
        throw error;
    }
};
